trigger:
  branches:
    include:
      - master


pool:
  vmImage: ubuntu-latest

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
        - task: TerraformInstaller@0
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV3@3
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: DownloadSecureFile@1
            displayName: download secure files
            inputs:
              secureFile: 'terraform-azure.pem.pub'
              retryCount: '2'
          - task: DownloadSecureFile@1
            inputs:
              secureFile: 'terraform.tfvars'
              retryCount: '2'
          - task: CmdLine@2
            displayName: create ssh-keys dir
            inputs:
              script: 'mkdir ssh-keys'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              failOnStderr: true
          - task: CopyFiles@2
            displayName: 'move secure files to ssh-keys'
            inputs:
              SourceFolder: $(Agent.TempDirectory)
              Contents: 'terraform-azure.pem.pub'
              TargetFolder: $(System.DefaultWorkingDirectory)/ssh-keys
          - task: CopyFiles@2
            displayName: 'move terraform.tfvars to repo root'
            inputs:
              SourceFolder: $(Agent.TempDirectory)
              Contents: 'terraform.tfvars'
              TargetFolder: $(System.DefaultWorkingDirectory)
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              # backendServiceArm: 'bobbing-for-apples-sp'
              # backendAzureRmResourceGroupName: '$(bkstrgrg)'
              # backendAzureRmStorageAccountName: '$(bkstrg)'
              # backendAzureRmContainerName: '$(bkcontainer)'
              # backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskV3@3
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'bobbing-for-apples-sp'
          - task: TerraformTaskV3@3
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'bobbing-for-apples-sp'